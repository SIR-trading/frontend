schema {
  query: Query
  subscription: Subscription
}

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

enum Aggregation_interval {
  hour
  day
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

"""
8 bytes signed integer

"""
scalar Int8

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  vault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Vault
  vaults(
    skip: Int = 0
    first: Int = 100
    orderBy: Vault_orderBy
    orderDirection: OrderDirection
    where: Vault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Vault!]!
  userPosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserPosition
  userPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: UserPosition_orderBy
    orderDirection: OrderDirection
    where: UserPosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UserPosition!]!
  userPositionTea(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserPositionTea
  userPositionTeas(
    skip: Int = 0
    first: Int = 100
    orderBy: UserPositionTea_orderBy
    orderDirection: OrderDirection
    where: UserPositionTea_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UserPositionTea!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  vault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Vault
  vaults(
    skip: Int = 0
    first: Int = 100
    orderBy: Vault_orderBy
    orderDirection: OrderDirection
    where: Vault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Vault!]!
  userPosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserPosition
  userPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: UserPosition_orderBy
    orderDirection: OrderDirection
    where: UserPosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UserPosition!]!
  userPositionTea(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserPositionTea
  userPositionTeas(
    skip: Int = 0
    first: Int = 100
    orderBy: UserPositionTea_orderBy
    orderDirection: OrderDirection
    where: UserPositionTea_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UserPositionTea!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

"""
A string representation of microseconds UNIX timestamp (16 digits)

"""
scalar Timestamp

type UserPosition {
  id: String!
  balance: BigInt!
  APE: String!
  user: Bytes!
  collateralSymbol: String!
  debtSymbol: String!
  collateralToken: String!
  debtToken: String!
  leverageTier: String!
  vaultId: String!
}

type UserPositionTea {
  id: String!
  balance: BigInt!
  user: Bytes!
  collateralSymbol: String!
  debtSymbol: String!
  collateralToken: Bytes!
  debtToken: Bytes!
  leverageTier: String!
  vaultId: String!
}

input UserPositionTea_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  balance: BigInt
  balance_not: BigInt
  balance_gt: BigInt
  balance_lt: BigInt
  balance_gte: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  balance_not_in: [BigInt!]
  user: Bytes
  user_not: Bytes
  user_gt: Bytes
  user_lt: Bytes
  user_gte: Bytes
  user_lte: Bytes
  user_in: [Bytes!]
  user_not_in: [Bytes!]
  user_contains: Bytes
  user_not_contains: Bytes
  collateralSymbol: String
  collateralSymbol_not: String
  collateralSymbol_gt: String
  collateralSymbol_lt: String
  collateralSymbol_gte: String
  collateralSymbol_lte: String
  collateralSymbol_in: [String!]
  collateralSymbol_not_in: [String!]
  collateralSymbol_contains: String
  collateralSymbol_contains_nocase: String
  collateralSymbol_not_contains: String
  collateralSymbol_not_contains_nocase: String
  collateralSymbol_starts_with: String
  collateralSymbol_starts_with_nocase: String
  collateralSymbol_not_starts_with: String
  collateralSymbol_not_starts_with_nocase: String
  collateralSymbol_ends_with: String
  collateralSymbol_ends_with_nocase: String
  collateralSymbol_not_ends_with: String
  collateralSymbol_not_ends_with_nocase: String
  debtSymbol: String
  debtSymbol_not: String
  debtSymbol_gt: String
  debtSymbol_lt: String
  debtSymbol_gte: String
  debtSymbol_lte: String
  debtSymbol_in: [String!]
  debtSymbol_not_in: [String!]
  debtSymbol_contains: String
  debtSymbol_contains_nocase: String
  debtSymbol_not_contains: String
  debtSymbol_not_contains_nocase: String
  debtSymbol_starts_with: String
  debtSymbol_starts_with_nocase: String
  debtSymbol_not_starts_with: String
  debtSymbol_not_starts_with_nocase: String
  debtSymbol_ends_with: String
  debtSymbol_ends_with_nocase: String
  debtSymbol_not_ends_with: String
  debtSymbol_not_ends_with_nocase: String
  collateralToken: Bytes
  collateralToken_not: Bytes
  collateralToken_gt: Bytes
  collateralToken_lt: Bytes
  collateralToken_gte: Bytes
  collateralToken_lte: Bytes
  collateralToken_in: [Bytes!]
  collateralToken_not_in: [Bytes!]
  collateralToken_contains: Bytes
  collateralToken_not_contains: Bytes
  debtToken: Bytes
  debtToken_not: Bytes
  debtToken_gt: Bytes
  debtToken_lt: Bytes
  debtToken_gte: Bytes
  debtToken_lte: Bytes
  debtToken_in: [Bytes!]
  debtToken_not_in: [Bytes!]
  debtToken_contains: Bytes
  debtToken_not_contains: Bytes
  leverageTier: String
  leverageTier_not: String
  leverageTier_gt: String
  leverageTier_lt: String
  leverageTier_gte: String
  leverageTier_lte: String
  leverageTier_in: [String!]
  leverageTier_not_in: [String!]
  leverageTier_contains: String
  leverageTier_contains_nocase: String
  leverageTier_not_contains: String
  leverageTier_not_contains_nocase: String
  leverageTier_starts_with: String
  leverageTier_starts_with_nocase: String
  leverageTier_not_starts_with: String
  leverageTier_not_starts_with_nocase: String
  leverageTier_ends_with: String
  leverageTier_ends_with_nocase: String
  leverageTier_not_ends_with: String
  leverageTier_not_ends_with_nocase: String
  vaultId: String
  vaultId_not: String
  vaultId_gt: String
  vaultId_lt: String
  vaultId_gte: String
  vaultId_lte: String
  vaultId_in: [String!]
  vaultId_not_in: [String!]
  vaultId_contains: String
  vaultId_contains_nocase: String
  vaultId_not_contains: String
  vaultId_not_contains_nocase: String
  vaultId_starts_with: String
  vaultId_starts_with_nocase: String
  vaultId_not_starts_with: String
  vaultId_not_starts_with_nocase: String
  vaultId_ends_with: String
  vaultId_ends_with_nocase: String
  vaultId_not_ends_with: String
  vaultId_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UserPositionTea_filter]
  or: [UserPositionTea_filter]
}

enum UserPositionTea_orderBy {
  id
  balance
  user
  collateralSymbol
  debtSymbol
  collateralToken
  debtToken
  leverageTier
  vaultId
}

input UserPosition_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  balance: BigInt
  balance_not: BigInt
  balance_gt: BigInt
  balance_lt: BigInt
  balance_gte: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  balance_not_in: [BigInt!]
  APE: String
  APE_not: String
  APE_gt: String
  APE_lt: String
  APE_gte: String
  APE_lte: String
  APE_in: [String!]
  APE_not_in: [String!]
  APE_contains: String
  APE_contains_nocase: String
  APE_not_contains: String
  APE_not_contains_nocase: String
  APE_starts_with: String
  APE_starts_with_nocase: String
  APE_not_starts_with: String
  APE_not_starts_with_nocase: String
  APE_ends_with: String
  APE_ends_with_nocase: String
  APE_not_ends_with: String
  APE_not_ends_with_nocase: String
  user: Bytes
  user_not: Bytes
  user_gt: Bytes
  user_lt: Bytes
  user_gte: Bytes
  user_lte: Bytes
  user_in: [Bytes!]
  user_not_in: [Bytes!]
  user_contains: Bytes
  user_not_contains: Bytes
  collateralSymbol: String
  collateralSymbol_not: String
  collateralSymbol_gt: String
  collateralSymbol_lt: String
  collateralSymbol_gte: String
  collateralSymbol_lte: String
  collateralSymbol_in: [String!]
  collateralSymbol_not_in: [String!]
  collateralSymbol_contains: String
  collateralSymbol_contains_nocase: String
  collateralSymbol_not_contains: String
  collateralSymbol_not_contains_nocase: String
  collateralSymbol_starts_with: String
  collateralSymbol_starts_with_nocase: String
  collateralSymbol_not_starts_with: String
  collateralSymbol_not_starts_with_nocase: String
  collateralSymbol_ends_with: String
  collateralSymbol_ends_with_nocase: String
  collateralSymbol_not_ends_with: String
  collateralSymbol_not_ends_with_nocase: String
  debtSymbol: String
  debtSymbol_not: String
  debtSymbol_gt: String
  debtSymbol_lt: String
  debtSymbol_gte: String
  debtSymbol_lte: String
  debtSymbol_in: [String!]
  debtSymbol_not_in: [String!]
  debtSymbol_contains: String
  debtSymbol_contains_nocase: String
  debtSymbol_not_contains: String
  debtSymbol_not_contains_nocase: String
  debtSymbol_starts_with: String
  debtSymbol_starts_with_nocase: String
  debtSymbol_not_starts_with: String
  debtSymbol_not_starts_with_nocase: String
  debtSymbol_ends_with: String
  debtSymbol_ends_with_nocase: String
  debtSymbol_not_ends_with: String
  debtSymbol_not_ends_with_nocase: String
  collateralToken: String
  collateralToken_not: String
  collateralToken_gt: String
  collateralToken_lt: String
  collateralToken_gte: String
  collateralToken_lte: String
  collateralToken_in: [String!]
  collateralToken_not_in: [String!]
  collateralToken_contains: String
  collateralToken_contains_nocase: String
  collateralToken_not_contains: String
  collateralToken_not_contains_nocase: String
  collateralToken_starts_with: String
  collateralToken_starts_with_nocase: String
  collateralToken_not_starts_with: String
  collateralToken_not_starts_with_nocase: String
  collateralToken_ends_with: String
  collateralToken_ends_with_nocase: String
  collateralToken_not_ends_with: String
  collateralToken_not_ends_with_nocase: String
  debtToken: String
  debtToken_not: String
  debtToken_gt: String
  debtToken_lt: String
  debtToken_gte: String
  debtToken_lte: String
  debtToken_in: [String!]
  debtToken_not_in: [String!]
  debtToken_contains: String
  debtToken_contains_nocase: String
  debtToken_not_contains: String
  debtToken_not_contains_nocase: String
  debtToken_starts_with: String
  debtToken_starts_with_nocase: String
  debtToken_not_starts_with: String
  debtToken_not_starts_with_nocase: String
  debtToken_ends_with: String
  debtToken_ends_with_nocase: String
  debtToken_not_ends_with: String
  debtToken_not_ends_with_nocase: String
  leverageTier: String
  leverageTier_not: String
  leverageTier_gt: String
  leverageTier_lt: String
  leverageTier_gte: String
  leverageTier_lte: String
  leverageTier_in: [String!]
  leverageTier_not_in: [String!]
  leverageTier_contains: String
  leverageTier_contains_nocase: String
  leverageTier_not_contains: String
  leverageTier_not_contains_nocase: String
  leverageTier_starts_with: String
  leverageTier_starts_with_nocase: String
  leverageTier_not_starts_with: String
  leverageTier_not_starts_with_nocase: String
  leverageTier_ends_with: String
  leverageTier_ends_with_nocase: String
  leverageTier_not_ends_with: String
  leverageTier_not_ends_with_nocase: String
  vaultId: String
  vaultId_not: String
  vaultId_gt: String
  vaultId_lt: String
  vaultId_gte: String
  vaultId_lte: String
  vaultId_in: [String!]
  vaultId_not_in: [String!]
  vaultId_contains: String
  vaultId_contains_nocase: String
  vaultId_not_contains: String
  vaultId_not_contains_nocase: String
  vaultId_starts_with: String
  vaultId_starts_with_nocase: String
  vaultId_not_starts_with: String
  vaultId_not_starts_with_nocase: String
  vaultId_ends_with: String
  vaultId_ends_with_nocase: String
  vaultId_not_ends_with: String
  vaultId_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UserPosition_filter]
  or: [UserPosition_filter]
}

enum UserPosition_orderBy {
  id
  balance
  APE
  user
  collateralSymbol
  debtSymbol
  collateralToken
  debtToken
  leverageTier
  vaultId
}

type Vault {
  id: String!
  vaultId: String!
  collateralToken: String!
  debtToken: String!
  collateralSymbol: String!
  debtSymbol: String!
  leverageTier: Int!
  totalValueLocked: BigInt!
}

input Vault_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  vaultId: String
  vaultId_not: String
  vaultId_gt: String
  vaultId_lt: String
  vaultId_gte: String
  vaultId_lte: String
  vaultId_in: [String!]
  vaultId_not_in: [String!]
  vaultId_contains: String
  vaultId_contains_nocase: String
  vaultId_not_contains: String
  vaultId_not_contains_nocase: String
  vaultId_starts_with: String
  vaultId_starts_with_nocase: String
  vaultId_not_starts_with: String
  vaultId_not_starts_with_nocase: String
  vaultId_ends_with: String
  vaultId_ends_with_nocase: String
  vaultId_not_ends_with: String
  vaultId_not_ends_with_nocase: String
  collateralToken: String
  collateralToken_not: String
  collateralToken_gt: String
  collateralToken_lt: String
  collateralToken_gte: String
  collateralToken_lte: String
  collateralToken_in: [String!]
  collateralToken_not_in: [String!]
  collateralToken_contains: String
  collateralToken_contains_nocase: String
  collateralToken_not_contains: String
  collateralToken_not_contains_nocase: String
  collateralToken_starts_with: String
  collateralToken_starts_with_nocase: String
  collateralToken_not_starts_with: String
  collateralToken_not_starts_with_nocase: String
  collateralToken_ends_with: String
  collateralToken_ends_with_nocase: String
  collateralToken_not_ends_with: String
  collateralToken_not_ends_with_nocase: String
  debtToken: String
  debtToken_not: String
  debtToken_gt: String
  debtToken_lt: String
  debtToken_gte: String
  debtToken_lte: String
  debtToken_in: [String!]
  debtToken_not_in: [String!]
  debtToken_contains: String
  debtToken_contains_nocase: String
  debtToken_not_contains: String
  debtToken_not_contains_nocase: String
  debtToken_starts_with: String
  debtToken_starts_with_nocase: String
  debtToken_not_starts_with: String
  debtToken_not_starts_with_nocase: String
  debtToken_ends_with: String
  debtToken_ends_with_nocase: String
  debtToken_not_ends_with: String
  debtToken_not_ends_with_nocase: String
  collateralSymbol: String
  collateralSymbol_not: String
  collateralSymbol_gt: String
  collateralSymbol_lt: String
  collateralSymbol_gte: String
  collateralSymbol_lte: String
  collateralSymbol_in: [String!]
  collateralSymbol_not_in: [String!]
  collateralSymbol_contains: String
  collateralSymbol_contains_nocase: String
  collateralSymbol_not_contains: String
  collateralSymbol_not_contains_nocase: String
  collateralSymbol_starts_with: String
  collateralSymbol_starts_with_nocase: String
  collateralSymbol_not_starts_with: String
  collateralSymbol_not_starts_with_nocase: String
  collateralSymbol_ends_with: String
  collateralSymbol_ends_with_nocase: String
  collateralSymbol_not_ends_with: String
  collateralSymbol_not_ends_with_nocase: String
  debtSymbol: String
  debtSymbol_not: String
  debtSymbol_gt: String
  debtSymbol_lt: String
  debtSymbol_gte: String
  debtSymbol_lte: String
  debtSymbol_in: [String!]
  debtSymbol_not_in: [String!]
  debtSymbol_contains: String
  debtSymbol_contains_nocase: String
  debtSymbol_not_contains: String
  debtSymbol_not_contains_nocase: String
  debtSymbol_starts_with: String
  debtSymbol_starts_with_nocase: String
  debtSymbol_not_starts_with: String
  debtSymbol_not_starts_with_nocase: String
  debtSymbol_ends_with: String
  debtSymbol_ends_with_nocase: String
  debtSymbol_not_ends_with: String
  debtSymbol_not_ends_with_nocase: String
  leverageTier: Int
  leverageTier_not: Int
  leverageTier_gt: Int
  leverageTier_lt: Int
  leverageTier_gte: Int
  leverageTier_lte: Int
  leverageTier_in: [Int!]
  leverageTier_not_in: [Int!]
  totalValueLocked: BigInt
  totalValueLocked_not: BigInt
  totalValueLocked_gt: BigInt
  totalValueLocked_lt: BigInt
  totalValueLocked_gte: BigInt
  totalValueLocked_lte: BigInt
  totalValueLocked_in: [BigInt!]
  totalValueLocked_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Vault_filter]
  or: [Vault_filter]
}

enum Vault_orderBy {
  id
  vaultId
  collateralToken
  debtToken
  collateralSymbol
  debtSymbol
  leverageTier
  totalValueLocked
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: Bytes
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}